<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAANJJAADSSQAAAAAAAAAA
        AAAAAAAAGhoaABoaGgAaGhoAGhoaABoaGgUaGhoNGBgaExcXGxUWFhsVFhYbFRYWGxUWFhsVFhYbFRYW
        GxUWFhsVFhYbFRYWGxUWFhsVFhYbFRYWGxUWFhsVFhYbFRcXGxUYGBoTGhoaDRoaGgUaGhoAGhoaABoa
        GgAaGhoAAAAAABoaGgAaGhoAGhoaABsbGgIZGRoPEhIcIBMTGy4gIBg7KSkWQisqFUMrKhVDKyoVQysq
        FUMrKhVDKyoVQysqFUMrKhVDKyoVQysqFUMrKhVDKyoVQysqFUMrKhVDKSkWQiAgGDsTExsuEhIcIBkZ
        Gg8bGxoCGhoaABoaGgAaGhoAGhoaABoaGgAbGxoDFhYbFhgYGjNGRRFiaGUJnnVxBsZ4dAXUeHQE1nh0
        BNZ4dATWeHQE1nh0BNZ4dATWeHQE1nh0BNZ4dATWeHQE1nh0BNZ4dATWeHQE1nh0BNZ4dAXUdXEGxmhl
        CZ5GRRFiGBgaMxYWGxYbGxoDGhoaABoaGgAaGhoAHBwaARUVGxQlJRg8amcMloSAB+qIhAb/iIQG/4iE
        Bv+IhAb/iIQG/4iEBv+IhAb/iIQG/4iEBv+IhAb/iIQG/4iEBv+IhAb/iIQG/4iEBv+IhAb/iIQG/4iE
        Bv+IhAb/iIQG/4SAB+pqZwyWJSUYPBUVGxQcHBoBGhoaABgYGgAWFhsKHx8ZMHNwDZ6OiQn7j4sJ/4+K
        Cf+Piwj/j4sI/4+LCP+Piwj/j4sI/4+LCP+Piwj/j4sI/4+LCP+Piwj/j4sI/4+LCP+Piwj/j4sI/4+L
        CP+Piwj/j4sI/4+LCP+Pign/j4sJ/46JCftzcA2eHx8ZMBYWGwoYGBoAGxsaAwkJHBZjYRBxko0K9JWQ
        Cv+VkQj/mJMF/5mVAv+alQL/mpUC/5qVAv+alQL/mpUC/5qVAv+alQL/mpUC/5qVAv+alQL/mpUC/5qV
        Av+alQL/mpUC/5qVAv+alQL/mZUC/5iTBf+VkQj/lZAK/5KNCvRjYRBxCQkcFhsbGgMTExsHKCgYKImF
        DL+ZlAn/mpUF/5yXAf+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAf+alQX/mZQJ/4mFDL8oKBgoExMbBwAA
        HgpXVRJClpIJ6JyXBP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwT/lpIJ6FdV
        EkIAAB4KAAAhC21qDVWalgX1nJcA/5yXAP+clwD/nJcA/5yXAP+blgD/mpUA/5qVAP+blgD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+blgD/mpUA/5qVAP+blgD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+algX1bWoNVQAAIQsAACMLcW4KWpuWAfeclwD/nJcA/5yXAP+alQD/lZAA/5CLAP+OiQD/jokA/5CL
        AP+VkAD/mpUA/5yXAP+clwD/nJcA/5yXAP+alQD/lZAA/5CLAP+OiQD/jokA/5CLAP+VkAD/mpUA/5yX
        AP+clwD/nJcA/5uWAfdxbgpaAAAjCwAAJAtxbglam5YA95yXAP+clwD/mJMA/4+KAP+RjQ7/oZ40/62q
        Tv+tqk//op41/5GNDf+PigD/mZQA/5yXAP+clwD/mZQA/4+KAP+RjQ3/op41/62qT/+tqk7/oZ40/5GN
        Dv+PigD/mJMA/5yXAP+clwD/m5YA93FuCVoAACQLAAAkC3FuCVqblgD3nJcA/5mUAP+RjAP/r6xS/+Hg
        v//4+PH////////////5+PL/4N+9/6ypTP+QiwH/mZQA/5mUAP+QiwH/rKlM/+Dfvf/5+PL/////////
        ///4+PH/4eC//6+sUv+RjAP/mZQA/5yXAP+blgD3cW4JWgAAJAsAACQLcW4JWpuWAPeclwD/lJAC/727
        cf/6+fT///////Dw2f/i4LT/4uCz//Dw2f//////+Pjw/7q3af+SjQH/ko0B/7q3af/4+PD///////Dw
        2f/h37P/4eC0//Dw2f//////+vn0/727cf+UkAL/nJcA/5uWAPdxbglaAAAkCwAAJAtxbglam5YA95qV
        AP+tqkT/9/fw//v79f/Ny37/pqEb/52YBf+dmAX/pqIc/9DNhv/9/Pj/+Pjw/66rTv+uq07/+Pjw//38
        +P/QzYb/pqIc/5aRA/+YkwT/pqIb/83Lfv/7+/X/9/fw/62qRP+alQD/m5YA93FuCVoAACQLAAAkC3Fu
        CVqblgD3nJcE/9jXpv//////0tCL/5yXAv+UjwD/ko0A/5KNAP+UjwD/nZgD/8/NhP//////7u7c/+7u
        3P//////z82E/52YA/+UjwD/m5ch/5iUFv+WkQD/nZgC/9LQi///////2Nem/5yXBP+blgD3cW4JWgAA
        JAsAACQLcW4JWpqVAPeloBj/7+/Y//j47/+uqjH/m5YA/6CbHv+hnSj/oZ0o/6CbHf+clwD/oZ0Q/+Hg
        tv///////////+Hgtv+hnRD/m5YA/6CbHf/b2a7/yMaD/52YEP+blgD/rqox//j47//v79j/paAY/5qV
        APdxbglaAAAkCwAAJAtxbglampUA96mkIP/09OT/8vLj/6KeH/+emQb/2dig/+/u2P/v7tj/2Nab/56Z
        Bv+TjgD/vLlp////////////vLlp/5OOAP+emQb/19WZ//r69P/29ur/xsNs/5qVAP+inh//8vLj//T0
        5P+ppCD/mpUA93FuCVoAACQLAAAkC3FuCVqalQD3o58T/+3s0P/6+vb/qqZA/5SPAP+ppCX/r6sy/6+q
        Mv+ooyT/lI8A/5qVHf/l5Mf////////////l5Mf/mpUd/5SPAP+opCT/4uC0/9LPi/+jnhX/k44A/6qm
        QP/6+vb/7ezQ/6OfE/+alQD3cW4JWgAAJAsAACQLcW4JWpuWAPeclwD/1NKQ///////Z163/k48R/46J
        AP+RjAD/kYwA/42IAP+VkRb/1tWo///////q6cr/6unK///////W1aj/lZEW/42IAP+inib/nZgZ/46J
        AP+TjxH/2det///////U0pD/nJcA/5uWAPdxbglaAAAkCwAAJAtxbglam5YA95uWAP+tqCv/8fDa////
        ///a2bD/qaZG/5iUIP+aliT/r6xT/+Hgvv//////8fDb/7CsNP+wrDT/8fDb///////h4L7/r6xT/5mV
        Iv+YlB7/qaZG/9rZsP//////8fDa/62oK/+blgD/m5YA93FuCVoAACQLAAAkC3FuCVqblgD3nJcA/5uW
        AP+3tEf/8O/Y///////8+/j/8vHj//Pz5//+/v3//////+vqzP+0sD3/m5YA/5uWAP+0sD3/6+rM////
        ///+/v3/8/Pn//Lx4//8+/j///////Dv2P+3tEf/m5YA/5yXAP+blgD3cW4JWgAAJAsAACQLcW4JWpuW
        APeclwD/nJcA/5uWAP+rpyj/0c+K/+vqzP/19OT/8/Lg/+jmwv/LyXr/p6Md/5uWAP+clwD/nJcA/5uW
        AP+nox3/y8l6/+jmwv/z8uD/9fTk/+vqzP/Rz4r/q6co/5uWAP+clwD/nJcA/5uWAPdxbglaAAAkCwAA
        JAtxbglam5YA95yXAP+clwD/nJcA/5uWAP+clwD/o54R/6mkIP+nox3/oZwM/5uWAP+blgD/nJcA/5yX
        AP+clwD/nJcA/5uWAP+blgD/oZwM/6ejHf+ppCD/o54R/5yXAP+blgD/nJcA/5yXAP+clwD/m5YA93Fu
        CVoAACQLAAAiC3JvC1mblwL2nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/m5YA/5uWAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/m5YA/5uWAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+blwL2cm8LWQAAIgsAAB8LbWoRUJ6ZCfKdmAH/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nZgB/56ZCfJtahFQAAAfCwIDHApTURY4npkS3aGcDP+dmAL/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/52YAv+hnAz/npkS3VNRFjgCAxwKFhYaBhsbGh6UkBijpqEY/6OeEv+emgb/nJcB/5yX
        AP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yXAP+clwD/nJcA/5yX
        AP+clwD/nJcA/5yXAf+emgb/o54S/6ahGP+UkBijGxsaHhYWGgYbGxoCBgcaEWhmHEujnx7hqKQf/6ej
        Hf+loBb/op0Q/6GcDf+hnA3/oZwN/6GcDf+hnA3/oZwN/6GcDf+hnA3/oZwN/6GcDf+hnA3/oZwN/6Gc
        Df+hnA3/oZwN/6GcDf+inRD/paAW/6ejHf+opB//o58e4WhmHEsGBxoRGxsaAhoaGgAZGRoHDxAaG4F+
        IWunoyXoq6cm/6umJv+rpib/q6Yl/6qmJf+qpiX/qqYl/6qmJf+qpiX/qqYl/6qmJf+qpiX/qqYl/6qm
        Jf+qpiX/qqYl/6qmJf+qpiX/q6Yl/6umJv+rpib/q6cm/6ejJeiBfiFrDxAaGxkZGgcaGhoAGhoaABsb
        GgEXFxoLFBQaHXl2JFuinirCrKcs9a2pLP+uqSz/rqks/66pLP+uqSz/rqks/66pLP+uqSz/rqks/66p
        LP+uqSz/rqks/66pLP+uqSz/rqks/66pLP+uqSz/raks/6ynLPWinirCeXYkWxQUGh0XFxoLGxsaARoa
        GgAaGhoAGhoaABsbGgEYGBoJBgcYFT8+Hyx+eyhclZEsiJuYLZycmC2enJgtnpyYLZ6cmC2enJgtnpyY
        LZ6cmC2enJgtnpyYLZ6cmC2enJgtnpyYLZ6cmC2enJgtnpuYLZyVkSyIfnsoXD8+HywGBxgVGBgaCRsb
        GgEaGhoAGhoaABoaGgAaGhoAGhoaABsbGgAbGxoEDg4YCwAAFREAABUVBwcXGAoKGBgJChgYCQoYGAkK
        GBgJChgYCQoYGAkKGBgJChgYCQoYGAkKGBgJChgYCQoYGAkKGBgKChgYBwcXGAAAFRUAABURDg4YCxsb
        GgQbGxoAGhoaABoaGgAaGhoAgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>